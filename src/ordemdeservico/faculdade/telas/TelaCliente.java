/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ordemdeservico.faculdade.telas;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author valdi
 */
public class TelaCliente extends javax.swing.JInternalFrame {

    private int id;

    /**
     * Creates new form TelasCliente
     */
    public TelaCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtNome = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        btnAdicionar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCliente = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        lblTel = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblId = new javax.swing.JLabel();
        txtCpf = new javax.swing.JFormattedTextField();
        txtTel = new javax.swing.JFormattedTextField();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Gerenciar Clientes");
        setToolTipText("");

        btnAdicionar.setText("ADICIONAR");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnRemover.setText("REMOVER");

        btnEditar.setText("EDITAR");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        tblCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME", "E-mail", "PHONE", "CPF"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCliente);

        btnBuscar.setText("BUSCAR");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel1.setText("CPF");

        lblNome.setText("NOME");

        lblTel.setText("PHONE");

        lblEmail.setText("E-mail");

        txtId.setEnabled(false);
        txtId.setPreferredSize(new java.awt.Dimension(15, 24));

        lblId.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        lblId.setText("ID");

        try {
            txtCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            txtTel.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("+55 (##) #####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblEmail)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTel)
                                    .addComponent(txtTel, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(txtCpf)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblId)
                                .addGap(18, 18, 18)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblNome)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblId)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTel)
                    .addComponent(jLabel1))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCpf, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .addComponent(txtTel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemover)
                    .addComponent(btnEditar)
                    .addComponent(btnAdicionar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                .addComponent(btnBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        if (aicionar_usuario()) {
            JOptionPane.showMessageDialog(null, "Cliente cadastrado com sucesso!");
            limpar_campos_txt();
        } else {
            JOptionPane.showMessageDialog(null, "Falha ao cadastrar cliente!");
        }
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscar_clientes();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void tblClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClienteMouseClicked
        preencher_campos_txt();
    }//GEN-LAST:event_tblClienteMouseClicked

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        editar_cliente();
    }//GEN-LAST:event_btnEditarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblTel;
    private javax.swing.JTable tblCliente;
    private javax.swing.JFormattedTextField txtCpf;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNome;
    private javax.swing.JFormattedTextField txtTel;
    // End of variables declaration//GEN-END:variables

    // Adiconar novo usuário no sistema
    private boolean aicionar_usuario() {
        // Validando se existe algum campo vazio
        if (verificar_campos_txt()) {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos!");
        } else {
            // Validando se o CPF já possui algum cadastro realizado
            if (verifica_disp_cpf()) {
                JOptionPane.showMessageDialog(null, "O CPF já possui um cadastro no sistema!");
            } else {
                // Caso atenda as condições o mesmo será adicionado no sistema
                try {
                    BufferedWriter bw = new BufferedWriter(new FileWriter("cliente.txt", true));
                    bw.write(Integer.toString(gerar_id()) + "," + this.txtNome.getText().toLowerCase() + ","
                            + this.txtEmail.getText().toLowerCase() + "," + this.txtTel.getText() + "," + this.txtCpf.getText());
                    bw.newLine();
                    bw.close();
                    return true;
                } catch (Exception e) {
                    System.out.println(e.getStackTrace());
                }
            }
        }
        return false;
    }

    // método que irá verificar se todos os campos estão preenchidos
    public boolean verificar_campos_txt() {
        if (this.txtNome.getText().isEmpty() || this.txtTel.getText().equals("+55 (  )      -    ")
                || this.txtEmail.getText().isEmpty() || this.txtCpf.getText().equals("   .   .   -  ")) {
            return true;
        } else {
            return false;
        }
    }

    // Verificar disponibilidade de CPF
    private boolean verifica_disp_cpf() {
        try {
            BufferedReader br = new BufferedReader(new FileReader("cliente.txt"));
            String linha;
            String[] vet = null;
            while ((linha = br.readLine()) != null) {
                vet = linha.split(",");
                if (vet[4].equals(this.txtCpf.getText())) {
                    return true;
                }
            }
        } catch (Exception e) {
            System.out.println(e.getStackTrace());
        }
        return false;
    }

    // Método que irá gerar um novo ID para o novo usuário
    private int gerar_id() {
        this.id = 0;
        try {
            BufferedReader br = new BufferedReader(new FileReader("cliente.txt"));
            String linha;
            String[] vet = null;
            while ((linha = br.readLine()) != null) {
                vet = linha.split(",");
                if (Integer.parseInt(vet[0]) > this.id) {
                    id = Integer.parseInt(vet[0]);
                }
            }
            id++;
            br.close();
        } catch (Exception e) {
            System.out.println(e.getStackTrace());
        }
        return this.id;
    }

    // Método criado para limpar os campos txt
    public void limpar_campos_txt() {
        this.txtId.setText(null);
        this.txtNome.setText(null);
        this.txtEmail.setText(null);
        this.txtTel.setText(null);
        this.txtCpf.setText(null);
    }
    
    // Função que irá povoar a tabela com os clientes do sistema
    private void buscar_clientes() {
        DefaultTableModel model = (DefaultTableModel) this.tblCliente.getModel();
        try {
            BufferedReader br = new BufferedReader(new FileReader("cliente.txt"));
            String linha;
            String[] vet = null;
            while ((linha = br.readLine()) != null) {
                vet = linha.split(",");
                model.addRow(new String[]{vet[0], vet[1], vet[2], vet[3], vet[4]});
            }
            br.close();
        } catch (Exception e) {
            e.getStackTrace();
        }
    }
    
    // Função irá pegar as informações da linha selecionada na 
    // tabela e irá inseri-las nos campos txt
    private void preencher_campos_txt() {
        int set = this.tblCliente.getSelectedRow();
        this.txtId.setText(this.tblCliente.getModel().getValueAt(set, 0).toString());
        this.txtNome.setText(this.tblCliente.getModel().getValueAt(set, 1).toString());
        this.txtEmail.setText(this.tblCliente.getModel().getValueAt(set, 2).toString());
        this.txtTel.setText(this.tblCliente.getModel().getValueAt(set, 3).toString());
        this.txtCpf.setText(this.tblCliente.getModel().getValueAt(set, 4).toString());
    }
    
    // Método editar cliente
    private void editar_cliente() {
        if (verifica_disp_cpf()) {
            TelaEditarCliente tec = new TelaEditarCliente();
            tec.setVisible(true);
            tec.preencher_txt(this.txtId.getText(), this.txtNome.getText(), this.txtEmail.getText(), this.txtTel.getText(), this.txtCpf.getText());
        } else {
            buscar_clientes();
            JOptionPane.showMessageDialog(null, "CPF não encontrado\nSelecione o CPF na tabela abaixo");
        }
    }
}
