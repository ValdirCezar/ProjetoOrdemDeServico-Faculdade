/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ordemdeservico.faculdade.telas;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Valdir Cezar
 */
public class TelaOrdemDeServico extends javax.swing.JInternalFrame {

    private int id_os;
    private String id_tecnico;
    private String id_cliente;

    Date data = new Date();
    SimpleDateFormat formatar = new SimpleDateFormat("dd/MM/yyyy");
    String dataFormatada = formatar.format(data);

    /**
     * Creates new form TelaOrdemDeServico
     */
    public TelaOrdemDeServico() {
        initComponents();
        popular_tbl_cliente();
        popular_tbl_os();
        popular_tbl_tecnico();
        this.txtData.setText(this.dataFormatada);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCliente = new javax.swing.JLabel();
        lblTblCliente = new javax.swing.JLabel();
        cbmStatus = new javax.swing.JComboBox();
        btnAdicionar = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTecnicos = new javax.swing.JTable();
        btnSalvar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblOrdensDeServico = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtObservacoes = new javax.swing.JTextArea();
        lblValor = new javax.swing.JLabel();
        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtData = new javax.swing.JTextField();
        lblData = new javax.swing.JLabel();
        txtTecnico = new javax.swing.JTextField();
        lblTecnico = new javax.swing.JLabel();
        lblObservacoes = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        lblTblTecnico = new javax.swing.JLabel();
        lblOrdensDeServico = new javax.swing.JLabel();
        lblCPF = new javax.swing.JLabel();
        txtCpfCliente = new javax.swing.JFormattedTextField();
        txtValor = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Gerenciamento de Ordens de Serviços");

        lblCliente.setText("Cliente");

        lblTblCliente.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        lblTblCliente.setText("Cliente");

        cbmStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aberto", "Andamento", "Encerrado" }));

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        lblStatus.setText("Status");

        tblTecnicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTecnicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTecnicosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTecnicos);

        btnSalvar.setText("Salvar");
        btnSalvar.setPreferredSize(new java.awt.Dimension(84, 32));
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "CPF"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblClientes);

        tblOrdensDeServico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Técnico", "Cliente", "CPF"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrdensDeServico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrdensDeServicoMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblOrdensDeServico);

        txtObservacoes.setColumns(20);
        txtObservacoes.setLineWrap(true);
        txtObservacoes.setRows(5);
        jScrollPane3.setViewportView(txtObservacoes);

        lblValor.setText("Valor R$");

        lblId.setText("ID");

        txtId.setEnabled(false);

        txtData.setEnabled(false);

        lblData.setText("Data");

        txtTecnico.setEnabled(false);

        lblTecnico.setText("Técnico");

        lblObservacoes.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        lblObservacoes.setText("Observações da Ordem de Serviço");

        txtCliente.setEnabled(false);

        lblTblTecnico.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        lblTblTecnico.setText("Técnico Responsável");

        lblOrdensDeServico.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        lblOrdensDeServico.setText("Ordens de Serviço");

        lblCPF.setText("CPF");

        txtCpfCliente.setEditable(false);
        try {
            txtCpfCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCpfCliente.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblValor)
                    .addComponent(lblTecnico)
                    .addComponent(lblCliente)
                    .addComponent(lblStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCliente)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(lblId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(lblData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbmStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCPF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCpfCliente))
                    .addComponent(txtTecnico))
                .addContainerGap(168, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(lblTblTecnico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTblCliente)
                        .addGap(169, 169, 169))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(lblObservacoes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblOrdensDeServico)
                        .addGap(128, 128, 128))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(245, 245, 245))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblValor)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblData)
                    .addComponent(lblId)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTecnico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbmStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus)
                    .addComponent(lblCPF)
                    .addComponent(txtCpfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdicionar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTblCliente)
                    .addComponent(lblTblTecnico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblObservacoes)
                    .addComponent(lblOrdensDeServico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void tblTecnicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTecnicosMouseClicked
       setar_txt_tecnico();
   }//GEN-LAST:event_tblTecnicosMouseClicked

   private void tblClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClientesMouseClicked
       setar_txt_cliente();
   }//GEN-LAST:event_tblClientesMouseClicked

    // Método adicionar OS
   private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
       if (gerar_os()) {
           JOptionPane.showMessageDialog(null, "Ordem de Serviço cadastrada com sucesso!");
           limpar_campos_txt();
           popular_tbl_os();
       } else {
           JOptionPane.showMessageDialog(null, "Falha ao cadastrar Ordem de Serviço");
       }
   }//GEN-LAST:event_btnAdicionarActionPerformed

    private void tblOrdensDeServicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrdensDeServicoMouseClicked
        setar_campos_os();

    }//GEN-LAST:event_tblOrdensDeServicoMouseClicked

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (editar_os()) {
            JOptionPane.showMessageDialog(null, "Dados atualizados com sucesso!");
            limpar_campos_txt();
            popular_tbl_os();
        } else {
            JOptionPane.showMessageDialog(null, "Falha ao atualizar informações\nTente mais tarde!");
        }
    }//GEN-LAST:event_btnSalvarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox cbmStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblCPF;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblObservacoes;
    private javax.swing.JLabel lblOrdensDeServico;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTblCliente;
    private javax.swing.JLabel lblTblTecnico;
    private javax.swing.JLabel lblTecnico;
    private javax.swing.JLabel lblValor;
    private javax.swing.JTable tblClientes;
    private javax.swing.JTable tblOrdensDeServico;
    private javax.swing.JTable tblTecnicos;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JFormattedTextField txtCpfCliente;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextArea txtObservacoes;
    private javax.swing.JTextField txtTecnico;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables

    // Método que irá criar uma Ordem de Serviço
    private boolean gerar_os() {
        this.txtData.setText(this.dataFormatada);
        if (verifica_campos_txt()) {
            try {
                BufferedWriter bw = new BufferedWriter(new FileWriter("os.txt", true));

                // Verificando o Status
                String status;
                if (this.cbmStatus.getSelectedIndex() == 0) {
                    status = "aberto";
                } else if (this.cbmStatus.getSelectedIndex() == 1) {
                    status = "em andamento";
                } else {
                    status = "encerrado";
                }
                bw.write(Integer.toString(gerar_id_os()) + "," + this.id_tecnico + "," + this.id_cliente + ","
                        + this.txtValor.getText() + "," + status + "," + this.txtData.getText() + "," + this.txtObservacoes.getText());
                bw.newLine();
                bw.close();
                return true;
            } catch (Exception e) {
                e.getStackTrace();
            }
        }
        return false;
    }

    // Método irá popular a tabela de técnicos
    public void popular_tbl_tecnico() {
        DefaultTableModel model = (DefaultTableModel) this.tblTecnicos.getModel();
        model.setNumRows(0);
        try {
            BufferedReader br = new BufferedReader(new FileReader("usuario.txt"));
            String linha;
            String[] vet = null;
            while ((linha = br.readLine()) != null) {
                vet = linha.split(",");
                model.addRow(new String[]{vet[0], vet[1]});
            }
            br.close();
        } catch (Exception e) {
            e.getStackTrace();
        }
    }

    // Método irá popular a tabela de clientes
    private void popular_tbl_cliente() {
        DefaultTableModel model = (DefaultTableModel) this.tblClientes.getModel();
        model.setNumRows(0);
        try {
            BufferedReader br = new BufferedReader(new FileReader("cliente.txt"));
            String linha;
            String[] vet = null;
            while ((linha = br.readLine()) != null) {
                vet = linha.split(",");
                model.addRow(new String[]{vet[0], vet[1], vet[4]});
            }
            br.close();
        } catch (Exception e) {
            e.getStackTrace();
        }
    }

    // Método irá popular a tabela de Ordens de Serviço
    private void popular_tbl_os() {
        DefaultTableModel model = (DefaultTableModel) this.tblOrdensDeServico.getModel();
        model.setNumRows(0);
        try {
            BufferedReader br1 = new BufferedReader(new FileReader("os.txt"));
            String linha1;
            String[] vet1 = null;
            while ((linha1 = br1.readLine()) != null) {
                vet1 = linha1.split(",");
                // Lendo as informações do arquivo de usuários
                BufferedReader br2 = new BufferedReader(new FileReader("usuario.txt"));
                String linha2;
                String[] vet2 = null;
                while ((linha2 = br2.readLine()) != null) {
                    vet2 = linha2.split(",");
                    // Lendo as informações do arquivo de Cliente
                    BufferedReader br3 = new BufferedReader(new FileReader("cliente.txt"));
                    String linha3;
                    String[] vet3 = null;
                    while ((linha3 = br3.readLine()) != null) {
                        vet3 = linha3.split(",");
                        if (vet1[1].equals(vet2[0]) && vet1[2].equals(vet3[0]) && !vet1[4].equals("encerrado")) {
                            model.addRow(new String[]{vet1[0], vet2[1], vet3[1], vet3[4]});
                        }
                    }
                    br3.close();
                }
                br2.close();
            }
            br1.close();
        } catch (Exception e) {
            e.getStackTrace();
        }
    }

    // Passando as informações do Técnico selecionado para o campo txt técinco
    private void setar_txt_tecnico() {
        int set = this.tblTecnicos.getSelectedRow();
        this.id_tecnico = this.tblTecnicos.getModel().getValueAt(set, 0).toString();
        this.txtTecnico.setText(this.tblTecnicos.getModel().getValueAt(set, 1).toString());
    }

    // Passando as informações da Ordem de Serviço selecionada para os campos txt
    private void setar_campos_os() {
        int set = this.tblOrdensDeServico.getSelectedRow();
        this.txtId.setText(this.tblOrdensDeServico.getValueAt(set, 0).toString());
        this.txtTecnico.setText(this.tblOrdensDeServico.getValueAt(set, 1).toString());
        this.txtCliente.setText(this.tblOrdensDeServico.getValueAt(set, 2).toString());
        this.txtCpfCliente.setText(this.tblOrdensDeServico.getValueAt(set, 3).toString());
        try {
            BufferedReader br = new BufferedReader(new FileReader("os.txt"));
            String linha;
            String[] vet = null;
            while ((linha = br.readLine()) != null) {
                vet = linha.split(",");
                if (vet[0].equals(this.tblOrdensDeServico.getValueAt(set, 0).toString())) {
                    this.id_tecnico = vet[1];
                    this.id_cliente = vet[2];
                    this.txtData.setText(vet[5]);
                    this.txtObservacoes.setText(vet[6]);
                    this.txtValor.setText(vet[3]);
                    if (vet[4].equals("aberto")) {
                        this.cbmStatus.setSelectedIndex(0);
                    } else if (vet[4].equals("em andamento")) {
                        this.cbmStatus.setSelectedIndex(1);
                    } else {
                        this.cbmStatus.setSelectedIndex(2);
                    }
                }
            }
            br.close();
        } catch (Exception e) {
        }
    }

    // Passando as informações do Cliente selecionado para o campo txt cliente
    private void setar_txt_cliente() {
        int set = this.tblClientes.getSelectedRow();
        this.id_cliente = this.tblClientes.getModel().getValueAt(set, 0).toString();
        this.txtCliente.setText(this.tblClientes.getModel().getValueAt(set, 1).toString());
        this.txtCpfCliente.setText(this.tblClientes.getModel().getValueAt(set, 2).toString());
    }

    // Verificar se algum campo está vazio
    private boolean verifica_campos_txt() {
        if (this.txtTecnico.getText().isEmpty() || this.txtCliente.getText().isEmpty() || this.txtValor.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos!");
        } else {
            return true;
        }
        return false;
    }

    // Método criado para gerar o ID da Ordem de Serviço
    private int gerar_id_os() {
        this.id_os = 0;
        try {
            BufferedReader br = new BufferedReader(new FileReader("os.txt"));
            String linha;
            String[] vet = null;
            while ((linha = br.readLine()) != null) {
                vet = linha.split(",");
                if (Integer.parseInt(vet[0]) > this.id_os) {
                    this.id_os = Integer.parseInt(vet[0]);
                }
            }
            br.close();
            this.id_os++;
        } catch (Exception e) {
            e.getStackTrace();
        }
        return this.id_os;
    }

    // Método gerar ID para Ordem Encerrada
    private int id_ordem_encerrada() {
        this.id_os = 0;
        try {
            BufferedReader br = new BufferedReader(new FileReader("encerradas.txt"));
            String linha;
            String[] vet = null;
            while ((linha = br.readLine()) != null) {
                vet = linha.split(",");
                if (Integer.parseInt(vet[0]) > this.id_os) {
                    this.id_os = Integer.parseInt(vet[0]);
                }
            }
            br.close();
            this.id_os++;
        } catch (Exception e) {
            e.getStackTrace();
        }
        return this.id_os;
    }

    // Limpando os campos TXT
    private void limpar_campos_txt() {
        this.txtCliente.setText(null);
        this.txtId.setText(null);
        this.txtValor.setText(null);
        this.txtTecnico.setText(null);
        this.txtCpfCliente.setText(null);
        this.txtObservacoes.setText(null);
    }

    // Editando e salvando as informações da Ordem de Serviço
    private boolean editar_os() {
        try {
            BufferedReader br = new BufferedReader(new FileReader("usuario.txt"));
        } catch (Exception e) {
            e.getStackTrace();
        }

        if (!(verifica_campos_txt())) {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos!");
        } else {
            try {
                // Editamos a Ordem
                BufferedReader br = new BufferedReader(new FileReader("os.txt"));
                String linha;
                String[] vet = null;
                ArrayList<String> array = new ArrayList<>();
                while ((linha = br.readLine()) != null) {
                    vet = linha.split(",");
                    if (!(vet[0].equals(this.txtId.getText()))) {
                        array.add(linha);
                    } else {
                        String status;
                        if (this.cbmStatus.getSelectedIndex() == 0) {
                            status = "aberto";
                        } else if (this.cbmStatus.getSelectedIndex() == 1) {
                            status = "em andamento";
                            linha = vet[0] + "," + this.id_tecnico + "," + this.id_cliente + "," + this.txtValor.getText()
                                    + "," + status + "," + this.txtData.getText() + "," + this.txtObservacoes.getText();
                            array.add(linha);
                        } else if (this.cbmStatus.getSelectedIndex() == 2) {
                            // Encerra a Ordem de Serviço
                            status = "encerrado";
                            linha = vet[0] + "," + this.id_tecnico + "," + this.id_cliente + "," + this.txtValor.getText()
                                    + "," + status + "," + this.txtData.getText() + "," + this.txtObservacoes.getText();
                            array.add(linha);
                            encerra_ordem(linha);
                        }
                    }
                }
                br.close();

                FileWriter fw = new FileWriter("os.txt");
                fw.close();

                BufferedWriter bw = new BufferedWriter(new FileWriter("os.txt", true));
                for (int i = 0; i < array.size(); i++) {
                    bw.write(array.get(i));
                    bw.newLine();
                }
                bw.close();
                return true;
            } catch (Exception e) {
                e.getStackTrace();
            }
        }

        return false;
    }

    private void encerra_ordem(String linha) {
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter("encerradas.txt", true));
            bw.write(Integer.toString(id_ordem_encerrada()) + "," + linha);
            bw.newLine();
            bw.close();
        } catch (Exception e) {
            e.getStackTrace();
        }
        JOptionPane.showMessageDialog(null,
                "Ordem de Serviço Nº " + this.txtId.getText()
                + "\nData: " + this.txtData.getText()
                + "\nValor: R$" + this.txtValor.getText()
                + "\nTécnico: " + this.txtTecnico.getText()
                + "\nCliente: " + this.txtCliente.getText()
                + "\nStatus: ENCERRADO");
    }

}
